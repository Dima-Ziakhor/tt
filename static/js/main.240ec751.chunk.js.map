{"version":3,"sources":["App.jsx","reportWebVitals.js","index.js"],"names":["App","useState","seconds","setSeconds","status","setStatus","timer","setTimer","isClick","setIsClick","isClickable","setIsClickable","useEffect","subject","Subject","interval","pipe","takeUntil","subscribe","value","next","complete","start","useCallback","wait","reset","stop","className","Date","toISOString","slice","onClick","id","console","log","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kSA6GeA,EAvGH,WACV,MAA8BC,mBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA4BF,mBAAS,QAArC,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAA0BJ,mBAAS,KAAnC,mBAAOK,EAAP,KAAcC,EAAd,KACA,EAA8BN,oBAAS,GAAvC,mBAAOO,EAAP,KAAgBC,EAAhB,KACA,EAAsCR,oBAAS,GAA/C,mBAAOS,EAAP,KAAoBC,EAApB,KAEAC,qBAAU,WACR,IAAMC,EAAU,IAAIC,IAsBlB,OApBFC,YAAS,IACNC,KAAKC,YAAUJ,IACfK,WAAU,WACM,UAAXd,GAAiC,YAAXA,GACxBD,GAAW,SAAAgB,GAAK,OAAIA,EAAQ,MAGf,YAAXf,GACFG,GAAS,SAAAY,GAAK,OAAIA,EAAQ,SAI1Bb,EAAQ,EACVK,GAAe,IAEfA,GAAe,GACfF,GAAW,GACXF,EAAS,MAGJ,WACLM,EAAQO,OACRP,EAAQQ,cAEX,CAACf,EAAOF,IAEX,IAAMkB,EAAQC,uBAAY,kBAAMlB,EAAU,WAAU,IAE9CmB,EAAOD,uBAAY,WACvBlB,EAAU,WACVI,GAAW,GAEPD,GAAWE,IACbL,EAAU,QACVI,GAAW,GACXE,GAAe,MAEhB,CAACH,EAASE,IAEPe,EAAQF,uBAAY,kBAAMpB,EAAW,KAAI,IAGzCuB,EAAOH,uBAAY,WACvBlB,EAAU,QACVF,EAAW,KACV,IAGH,OACE,qBAAKwB,UAAU,MAAf,SACE,sBAAKA,UAAU,eAAf,UACE,qBAAKA,UAAU,iBAAf,SACG,IAAIC,KAAK1B,GAAS2B,cAAcC,MAAM,GAAI,MAG7C,sBAAKH,UAAU,eAAf,UACE,wBACEA,UAAU,cACVI,QAAST,EAFX,mBAOA,wBACEK,UAAU,cACVI,QAASL,EAFX,kBAOA,wBACEM,GAAG,OACHL,UAAU,cACVI,QAAS,WACPP,IACAS,QAAQC,IAAI1B,EAASE,IALzB,kBAWA,wBACEiB,UAAU,cACVI,QAASN,EAFX,4BCrFKU,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAG1Bb,M","file":"static/js/main.240ec751.chunk.js","sourcesContent":["import { useEffect, useState, useCallback } from 'react';\nimport { interval, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport './App.scss';\n\nconst App = () => {\n  const [seconds, setSeconds] = useState(0);\n  const [status, setStatus] = useState('stop');\n  const [timer, setTimer] = useState(300);\n  const [isClick, setIsClick] = useState(false);\n  const [isClickable, setIsClickable] = useState(false);\n\n  useEffect(() => {\n    const subject = new Subject();\n\n    interval(10)\n      .pipe(takeUntil(subject))\n      .subscribe(() => {\n        if (status === 'start' || status === 'waiting') {\n          setSeconds(value => value + 10);\n        }\n\n        if (status === 'waiting') {\n          setTimer(value => value - 10);\n        }\n      });\n\n      if (timer > 0) {\n        setIsClickable(true);\n      } else {\n        setIsClickable(false);\n        setIsClick(false);\n        setTimer(300);\n      }\n\n      return () => {\n        subject.next();\n        subject.complete();\n      };\n  }, [timer, status]);\n\n  const start = useCallback(() => setStatus('start'), []);\n\n  const wait = useCallback(() => {\n    setStatus('waiting');\n    setIsClick(true);\n\n    if (isClick && isClickable) {\n      setStatus('wait');\n      setIsClick(false);\n      setIsClickable(false);\n    }\n  }, [isClick, isClickable]);\n\n  const reset = useCallback(() => setSeconds(0), []);\n\n\n  const stop = useCallback(() => {\n    setStatus('stop');\n    setSeconds(0);\n  }, []);\n\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__wrapper\">\n        <div className=\"App__stopwatch\">\n          {new Date(seconds).toISOString().slice(11, 19)}\n        </div>\n\n        <div className=\"App__buttons\">\n          <button\n            className=\"App__button\"\n            onClick={start}\n          >\n            Start\n          </button>\n\n          <button\n            className=\"App__button\"\n            onClick={stop}\n          >\n            Stop\n          </button>\n\n          <button\n            id=\"wait\"\n            className=\"App__button\"\n            onClick={() => {\n              wait();\n              console.log(isClick, isClickable)\n            }}\n          >\n            Wait\n          </button>\n\n          <button\n            className=\"App__button\"\n            onClick={reset}\n          >\n            Reset\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}